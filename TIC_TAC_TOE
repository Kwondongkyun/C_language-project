#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROW 5
#define COL 5

int check_occu(char board[][COL], int y, int x);
void print_board(char board[][COL], int row);
int check_status(char board[][COL], int row, int col);

int main(void)
{
	while (1)
	{

		char board[ROW][COL];
		int x, y;
		int t_count = 0;

		srand((unsigned int)time(NULL));

		// 보드를 초기화한다. 
		for (int i = 0; i < ROW; i++)
		{
			for (int j = 0; j < COL; j++)
			{
				board[i][j] = ' ';
			}
		}

		while (1)
		{

			//사용자 차례
			while (1)
			{
				printf("(x, y) 좌표: ");
				scanf_s("%d %d", &x, &y);
				getchar();

				if (x < 0 || y < 0)
				{
					printf("\n게임을 종료합니다.\n\n");
					return 0;
				}
				// 보드 상태 확인
				if (check_occu(board, y, x) == -1)
				{
					printf("이미 놓여있는 좌표입니다\n\n");
					continue;
				}
				else
				{
					t_count++;
					board[y][x] = 'O';
					break;
				}
			}

			// 컴퓨터 차례
			while (1)
			{
				x = rand() % COL;
				y = rand() % ROW;

				if (check_occu(board, y, x) == -1)
				{
					continue;
				}
				else
				{
					board[y][x] = 'X';
					break;
				}
			}

			// 보드를 화면에 그린다. 
			print_board(board, ROW);


			if (check_status(board, ROW, COL) == -1)
			{
				printf("\n=====================\n");
				printf("컴퓨터가 승리했습니다.\n");
				printf("시도횟수: %d\n", t_count);
				printf("=====================\n\n");
				break;

			}
			else if (check_status(board, ROW, COL) == 1)
			{
				printf("\n=====================\n");
				printf("사용자가 승리했습니다.\n");
				printf("시도횟수: %d\n", t_count);
				printf("=====================\n\n");
				break;

			}

		}
	}


	return 0;
}

// 보드에 놓여있는지 확인. 놓여있다면 -1을 return, 놓여있지 않으면 1을 return
int check_occu(char board[][COL], int y, int x)
{
	if (board[y][x] != ' ')
	{
		return -1;
	}
	else
	{
		return 1;
	}
}

void print_board(char board[][COL], int row)
{
	for (int i = 0; i < row; i++)
	{
		printf("---|---|---|---|---\n");
		printf(" %c | %c | %c | %c | %c \n", board[i][0], board[i][1], board[i][2], board[i][3], board[i][4]);
	}
	printf("---|---|---|---|---\n");
}

int check_status(char board[][COL], int row, int col)
{
	// 행이 같은 경우. 사용자가 이긴 경우 1을 컴퓨터가 이긴 경우 -1을 return
	if ((board[0][0] == 'O' && board[0][1] == 'O' && board[0][2] == 'O' && board[0][3] == 'O' && board[0][4] == 'O') ||
		(board[1][0] == 'O' && board[1][1] == 'O' && board[1][2] == 'O' && board[1][3] == 'O' && board[1][4] == 'O') ||
		(board[2][0] == 'O' && board[2][1] == 'O' && board[2][2] == 'O' && board[2][3] == 'O' && board[2][4] == 'O') ||
		(board[3][0] == 'O' && board[3][1] == 'O' && board[3][2] == 'O' && board[3][3] == 'O' && board[3][4] == 'O') ||
		(board[4][0] == 'O' && board[4][1] == 'O' && board[4][2] == 'O' && board[4][3] == 'O' && board[4][4] == 'O'))
	{
		return 1;
	}
	else if ((board[0][0] == 'X' && board[0][1] == 'X' && board[0][2] == 'X' && board[0][3] == 'X' && board[0][4] == 'X') ||
		(board[1][0] == 'X' && board[1][1] == 'X' && board[1][2] == 'X' && board[1][3] == 'X' && board[1][4] == 'X') ||
		(board[2][0] == 'X' && board[2][1] == 'X' && board[2][2] == 'X' && board[2][3] == 'X' && board[2][4] == 'X') ||
		(board[3][0] == 'X' && board[3][1] == 'X' && board[3][2] == 'X' && board[3][3] == 'X' && board[3][4] == 'X') ||
		(board[4][0] == 'X' && board[4][1] == 'X' && board[4][2] == 'X' && board[4][3] == 'X' && board[4][4] == 'X'))
	{
		return -1;
	}


	// 열이 같은 경우. 사용자가 이긴 경우 1을 컴퓨터가 이긴 경우 -1을 return
	if ((board[0][0] == 'O' && board[1][0] == 'O' && board[2][0] == 'O' && board[3][0] == 'O' && board[4][0] == 'O') ||
		(board[0][1] == 'O' && board[1][1] == 'O' && board[2][1] == 'O' && board[3][1] == 'O' && board[4][1] == 'O') ||
		(board[0][2] == 'O' && board[1][2] == 'O' && board[2][2] == 'O' && board[3][2] == 'O' && board[4][2] == 'O') ||
		(board[0][3] == 'O' && board[1][3] == 'O' && board[2][3] == 'O' && board[3][3] == 'O' && board[4][3] == 'O') ||
		(board[0][4] == 'O' && board[1][4] == 'O' && board[2][4] == 'O' && board[3][4] == 'O' && board[4][4] == 'O'))
	{
		return 1;
	}
	else if ((board[0][0] == 'X' && board[1][0] == 'X' && board[2][0] == 'X' && board[3][0] == 'X' && board[4][0] == 'X') ||
		(board[0][1] == 'X' && board[1][1] == 'X' && board[2][1] == 'X' && board[3][1] == 'X' && board[4][1] == 'X') ||
		(board[0][2] == 'X' && board[1][2] == 'X' && board[2][2] == 'X' && board[3][2] == 'X' && board[4][2] == 'X') ||
		(board[0][3] == 'X' && board[1][3] == 'X' && board[2][3] == 'X' && board[3][3] == 'X' && board[4][3] == 'X') ||
		(board[0][4] == 'X' && board[1][4] == 'X' && board[2][4] == 'X' && board[3][4] == 'X' && board[4][4] == 'X'))
	{
		return -1;
	}

	// 대각선이 같은 경우. 사용자가 이긴 경우 1을 컴퓨터가 이긴 경우 -1을 return
	if ((board[0][0] == 'O' && board[1][1] == 'O' && board[2][2] == 'O' && board[3][3] == 'O' && board[4][4] == 'O') ||
		(board[4][0] == 'O' && board[3][1] == 'O' && board[2][2] == 'O' && board[1][3] == 'O' && board[0][4] == 'O'))
	{
		return 1;
	}
	else if ((board[0][0] == 'X' && board[1][1] == 'X' && board[2][2] == 'X' && board[3][3] == 'X' && board[4][4] == 'X') ||
		(board[4][0] == 'X' && board[3][1] == 'X' && board[2][2] == 'X' && board[1][3] == 'X' && board[0][4] == 'X'))
	{
		return -1;
	}

	return 0;

}
